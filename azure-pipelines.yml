name: $(BuildDefinitionName)_$(SourceBranchName)_$(Date:yy)$(DayOfYear).$(BuildCounter)

parameters:
  - name: ContinueEvenIfResourcesAreGettingDestroyed
    displayName: "Continue even if resources are getting destroyed"
    type: boolean
    default: false
  - name: disableStryker
    displayName: "Disable Stryker"
    type: boolean
    default: false

trigger:
  - main
  - release/*
  - develop

pool: 
    name: NautilusBuild
    demands: vs_16 -equals 1 #exclude agents 13 and 14 as code coverage report fails

variables:
  - name: BuildConfiguration
    value: "release"
  - name: BuildPlatform
    value: "any cpu"
  - name: BuildCounter
    value: $[counter(format('{0:yyyyMMdd}', pipeline.startTime), 1)]
  - name: UKHOAssemblyCompany
    value: "UK Hydrographic Office"
  - name: UKHOAssemblyVersionPrefix
    value: "1.0."
  - name: UKHOAssemblyProduct
    value: "Periodic Output Service"
  - name: UKHOAssemblyCopyright
    value: "Copyright Â© UK Hydrographic Office"
  - name: DeploymentPool
    value: "Mare Nectaris"
  - name: Container
    value: "ukhydrographicoffice/terraform-azure-powershell-unzip:1.9.6"
  - name: WindowPool
    value: "NautilusBuild"

stages:
  - stage: Stryker_Mutator
    displayName: "Stryker Mutator"
    condition: ${{ eq(parameters.disableStryker, false) }}
    dependsOn: []
    variables:
    - name: StrykerDotNetVersion
      value: 8.0.x
    jobs:
    - job: Stryker
      workspace:
        clean: all
      steps:
        - task: UseDotNet@2
          displayName: 'Use .NET SDK'
          inputs:
            packageType: sdk
            useGlobalJson: true
            workingDirectory: '$(Build.SourcesDirectory)'

        - task: UseDotNet@2
          displayName: 'Use .NET SDK for Stryker'
          inputs:
            packageType: sdk
            version: $(StrykerDotNetVersion)

        - task: PowerShell@1
          displayName: "Create global.json for .NET"
          inputs:
            scriptType: inlineScript
            workingFolder: $(Agent.TempDirectory)
            inlineScript: |
              dotnet new globaljson --sdk-version $(StrykerDotNetVersion)

        - task: DotNetCoreCLI@2
          displayName: "Install Stryker"
          inputs:
            command: custom
            custom: tool
            workingDirectory: $(Agent.TempDirectory)
            arguments: install dotnet-stryker --tool-path $(Agent.BuildDirectory)/tools

        - task: Powershell@2
          displayName: "Run Stryker"
          inputs:
            workingDirectory: '$(Build.SourcesDirectory)\UKHO.PeriodicOutputService'
            targetType: 'inline'
            pwsh: true
            script: $(Agent.BuildDirectory)/tools/dotnet-stryker

        - task: PublishMutationReport@0
          displayName: 'Publish Stryker Mutator Report'
          inputs:
            reportPattern: '**/mutation-report.html'

  - stage: PERFORM_DEPENDENCYCHECK_DOTNETBUILD_DOTNETTEST_AND_PUBLISH
    displayName: "Build (inc DependencyChecker, Dotnet Build , dotnet test and publish artifact )"
    dependsOn: []
    jobs:
      - job: Dependencychecker
        workspace:
          clean: all
        displayName: "Dependencychecker"
        steps:
          - task: UseDotNet@2
            displayName: 'Use .NET SDK'
            inputs:
              packageType: sdk
              useGlobalJson: true
              workingDirectory: '$(Build.SourcesDirectory)'

          - task: DotNetCoreCLI@2
            displayName: ".Net Core - NuGet restore non test projects only"
            inputs:
              command: "restore"
              projects: |
                **/*.csproj
                !**/*Tests.csproj
              feedsToUse: config
              noCache: true
              nugetConfigPath: '$(Build.SourcesDirectory)\BuildNuget.config'
              workingDirectory: '$(Build.SourcesDirectory)\UKHO.PeriodicOutputService'
              packagesDirectory: '$(Build.SourcesDirectory)\UKHO.PeriodicOutputService\packages'

          - task: CmdLine@1
            displayName: "Run OWASP Dependency Checker"
            inputs:
              filename: 'dependency-check.bat'
              arguments: '--project "periodic-output-service - $(Build.SourceBranchName)" --scan "$(Build.SourcesDirectory)\UKHO.PeriodicOutputService" --out "$(Build.ArtifactStagingDirectory)\DCReport" --suppression $(Build.SourcesDirectory)\NVDSuppressions.xml --noupdate'

          - task: PublishBuildArtifacts@1
            displayName: "Publish Artifact: OWASP Dependency Checker Report"
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)\DCReport'
              ArtifactName: "OWASP Dependency Checker Report"

          - task: PowerShell@1
            displayName: "Fail Build if Dependency Check Finds Any Vulnerabilities"
            inputs:
              scriptType: inlineScript
              arguments: '-ReportLocation $(Build.ArtifactStagingDirectory)\DCReport\*'
              inlineScript: |
                param($ReportLocation)
                Invoke-VulnerabilityCheck -ReportLocation $ReportLocation

      - job: UnitTestsAndCodeCoverage
        workspace:
          clean: all
        displayName: "Dotnet Test and Publish Code Coverage"
        steps:
          - task: UseDotNet@2
            displayName: 'Use .NET SDK'
            inputs:
              packageType: sdk
              useGlobalJson: true
              workingDirectory: '$(Build.SourcesDirectory)'

          - task: DotNetCoreCLI@2
            displayName: ".Net Core - NuGet restore test projects only"
            inputs:
              command: "restore"
              projects: "**/*Tests.csproj"
              feedsToUse: config
              noCache: true
              nugetConfigPath: '$(Build.SourcesDirectory)\BuildNuget.config'
              workingDirectory: '$(Build.SourcesDirectory)\UKHO.PeriodicOutputService'
              packagesDirectory: '$(Build.SourcesDirectory)\UKHO.PeriodicOutputService\packagesForTests'

          - task: DotNetCoreCLI@2
            displayName: "dotnet test - Perform Unit Tests"
            inputs:
              command: "test"
              projects: "**/*UnitTests.csproj"
              arguments: '--configuration $(BuildConfiguration) --settings "$(Build.SourcesDirectory)\test.runsettings" /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura'
              publishTestResults: true
              testRunTitle: "UnitTests"

          - task: PowerShell@2
            displayName: "Generate code coverage report"
            inputs:
              targetType: filePath
              filePath: '$(Build.SourcesDirectory)\CodeCoverageReport.ps1'
              arguments: '-source "$(Build.SourcesDirectory)" -reportFolder "$(Build.ArtifactStagingDirectory)"'

          - task: PublishBuildArtifacts@1
            displayName: "Publish Code coverage"
            inputs:
              PathtoPublish: "$(Build.ArtifactStagingDirectory)/codecoveragereport"
              ArtifactName: codecoveragereport

      - job: BuildAndPublishWebJob
        workspace:
          clean: all
        displayName: "Dotnet Build publish WebJob"
        steps:
          - task: PowerShell@2
            displayName: "Set assembly version numbers based on build ID"
            inputs:
              targetType: filePath
              filePath: '$(Build.SourcesDirectory)\Apply-AssemblyVersionAndDefaults.ps1'
              arguments: '-buildNumber "$(Build.BuildNumber)" -solutionDirectory "$(Build.SourcesDirectory)\UKHO.PeriodicOutputService\" -UKHOAssemblyCompany "$env:UKHOAssemblyCompany" -UKHOAssemblyCopyright "$(UKHOAssemblyCopyright)" -UKHOAssemblyVersionPrefix "$env:UKHOAssemblyVersionPrefix" -UKHOAssemblyProduct "$env:UKHOAssemblyProduct"'

          - task: UseDotNet@2
            displayName: 'Use .NET SDK'
            inputs:
              packageType: sdk
              useGlobalJson: true
              workingDirectory: '$(Build.SourcesDirectory)'

          - task: DotNetCoreCLI@2
            displayName: ".Net Core - NuGet restore"
            inputs:
              command: restore
              projects: |
                **/*.csproj
              feedsToUse: config
              noCache: true
              nugetConfigPath: '$(Build.SourcesDirectory)\BuildNuget.config'
              workingDirectory: '$(Build.SourcesDirectory)\UKHO.PeriodicOutputService'

          - task: DotNetCoreCLI@2
            displayName: "dotnet build task"
            inputs:
              command: "build"
              projects: "**/*.csproj"
              arguments: '--configuration $(BuildConfiguration) --output $(Build.BinariesDirectory)'

          - task: DotNetCoreCLI@2
            displayName: "Publish POS Fulfilment Service Code"
            inputs:
              command: "publish"
              publishWebProjects: false
              projects: "**/*UKHO.PeriodicOutputService.Fulfilment.csproj"
              arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)\PeriodicOutputFulfilmentService\App_Data\jobs\triggered\POSFulfilmentWebJob'
              zipAfterPublish: false
              modifyOutputPath: false

          - task: DotNetCoreCLI@2
            displayName: "Publish AIO Fulfilment Service Code"
            inputs:
              command: "publish"
              publishWebProjects: false
              projects: "**/*UKHO.AdmiraltyInformationOverlay.Fulfilment.csproj"
              arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)\PeriodicOutputFulfilmentService\App_Data\jobs\triggered\AIOFulfilmentWebJob'
              zipAfterPublish: false
              modifyOutputPath: false

          - task: DotNetCoreCLI@2
            displayName: "Publish BESS Configuration Service Code"
            inputs:
              command: "publish"
              publishWebProjects: false
              projects: "**/*UKHO.BESS.ConfigurationService.csproj"
              arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)\PeriodicOutputFulfilmentService\App_Data\jobs\continuous\BESSConfigurationServiceWebJob'
              zipAfterPublish: false
              modifyOutputPath: false

          - task: DotNetCoreCLI@2
            displayName: "Publish BESS Builder Service Code"
            inputs:
              command: "publish"
              publishWebProjects: false
              projects: "**/*UKHO.BESS.BuilderService.csproj"
              arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)\PeriodicOutputFulfilmentService\App_Data\jobs\continuous\BESSBuilderServiceWebJob'
              zipAfterPublish: false
              modifyOutputPath: false

          - task: DotNetCoreCLI@2
            displayName: "Publish BESS CleanUp Service Code"
            inputs:
              command: "publish"
              publishWebProjects: false
              projects: "**/*UKHO.BESS.CleanUpJob.csproj"
              arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)\PeriodicOutputFulfilmentService\App_Data\jobs\triggered\BESSCleanUpWebJob'
              zipAfterPublish: false
              modifyOutputPath: false

          - task: ArchiveFiles@2
            displayName: "Zip POS fulfilment service"
            inputs:
              rootFolderOrFile: '$(Build.ArtifactStagingDirectory)\PeriodicOutputFulfilmentService\'
              includeRootFolder: false
              archiveType: "zip"
              archiveFile: '$(Build.ArtifactStagingDirectory)\PeriodicOutputFulfilmentService\PeriodicOutputFulfilmentService.zip'
              replaceExistingArchive: true

          - task: PublishBuildArtifacts@1
            displayName: "Publish PeriodicOutputFulfilmentService Artifact"
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)\PeriodicOutputFulfilmentService'
              ArtifactName: PeriodicOutputService

          - task: PowerShell@2
            displayName: "Generate event id runbook"
            inputs:
              targetType: filePath
              filePath: '$(Build.SourcesDirectory)\Utility\XmlToRtfTransformation.ps1'
              arguments: '-xmlFilePath $(Build.ArtifactStagingDirectory)\PeriodicOutputFulfilmentService\App_Data\jobs\triggered\POSFulfilmentWebJob\UKHO.PeriodicOutputService.Common.xml -xsltFilePath $(Build.SourcesDirectory)\Utility\EventIdXmlTransformation.xslt -outputFileName Runbook-EventId'
          
          - task: PublishBuildArtifacts@1
            displayName: "Publish event id runbook"
            inputs:
              PathtoPublish: '$(Build.SourcesDirectory)\Utility\Runbook-EventId.rtf'
              ArtifactName: Runbook

      - job: PublishTerraformArtifacts
        workspace:
          clean: all
        displayName: "Publish Terraform Artifacts"
        steps:
          - task: PublishBuildArtifacts@1
            displayName: "Publish terraform Artifacts"
            inputs:
              PathtoPublish: '$(Build.SourcesDirectory)\Deployment'
              ArtifactName: terraformartifact

      - job: PublishFunctionalTests
        workspace:
          clean: all
        displayName: "Publish Functional Tests"
        steps:
          - task: UseDotNet@2
            displayName: 'Use .NET SDK'
            inputs:
              packageType: sdk
              useGlobalJson: true
              workingDirectory: '$(Build.SourcesDirectory)'

          - task: DotNetCoreCLI@2
            displayName: ".Net Core - NuGet restore"
            inputs:
              command: restore
              projects: |
                **/*.csproj
              feedsToUse: config
              noCache: true
              nugetConfigPath: '$(Build.SourcesDirectory)\BuildNuget.config'
              workingDirectory: '$(Build.SourcesDirectory)\UKHO.PeriodicOutputService'

          - task: DotNetCoreCLI@2
            displayName: "Publish POS functional test"
            inputs:
              command: "publish"
              publishWebProjects: false
              projects: "**/*UKHO.PeriodicOutputService.API.FunctionalTests.csproj"
              arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)\UKHO.PeriodicOutputService.API.FunctionalTests'
              zipAfterPublish: false

          - task: PublishBuildArtifacts@1
            displayName: "Publish POS Functional test Artifact"
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)\UKHO.PeriodicOutputService.API.FunctionalTests'
              ArtifactName: posfunctionaltests

          - task: DotNetCoreCLI@2
            displayName: "Publish BESS functional test"
            inputs:
              command: "publish"
              publishWebProjects: false
              projects: "**/*UKHO.BESS.API.FunctionalTests.csproj"
              arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)\UKHO.BESS.API.FunctionalTests'
              zipAfterPublish: false

          - task: PublishBuildArtifacts@1
            displayName: "Publish BESS Functional test Artifact"
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)\UKHO.BESS.API.FunctionalTests'
              ArtifactName: bessfunctionaltests
        
      - job: BuildAndPublishMockAPI
        workspace:
          clean: all
        displayName: "Build and Publish Mock API"
        steps:
          - task: PowerShell@2
            displayName: "Set assembly version numbers based on build ID"
            inputs:
              targetType: filePath
              filePath: '$(Build.SourcesDirectory)\Apply-AssemblyVersionAndDefaults.ps1'
              arguments: '-buildNumber "$(Build.BuildNumber)" -solutionDirectory "$(Build.SourcesDirectory)\UKHO.FmEssFssMock.API\" -UKHOAssemblyCompany "$env:UKHOAssemblyCompany" -UKHOAssemblyCopyright "$(UKHOAssemblyCopyright)" -UKHOAssemblyVersionPrefix "$env:UKHOAssemblyVersionPrefix" -UKHOAssemblyProduct "$(UKHOAssemblyProduct) Mock"'

          - task: UseDotNet@2
            displayName: 'Use .NET SDK'
            inputs:
              packageType: sdk
              useGlobalJson: true
              workingDirectory: '$(Build.SourcesDirectory)'

          - task: DotNetCoreCLI@2
            displayName: ".Net Core - NuGet restore"
            inputs:
              command: restore
              projects: |
                **/*.csproj
              feedsToUse: config
              noCache: true
              nugetConfigPath: '$(Build.SourcesDirectory)\BuildNuget.config'
              workingDirectory: '$(Build.SourcesDirectory)\UKHO.FmEssFssMock.API'

          - task: DotNetCoreCLI@2
            displayName: "dotnet build task"
            inputs:
              command: "build"
              projects: "**/*UKHO.FmEssFssMock.API.csproj"
              arguments: '--configuration $(BuildConfiguration) --output $(Build.BinariesDirectory)'
              workingDirectory: '$(Build.SourcesDirectory)\UKHO.FmEssFssMock.API'

          - task: DotNetCoreCLI@2
            displayName: "Publish MockWebAPI"
            inputs:
              command: "publish"
              publishWebProjects: false
              projects: '**/*UKHO.FmEssFssMock.API.csproj'
              arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)\MockWebAPI'
              zipAfterPublish: true
              modifyOutputPath: true

          - task: PublishBuildArtifacts@1
            displayName: "Publish WebAPI Artifact"
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)\MockWebAPI'
              ArtifactName: MockWebAPI

      - job: BuildAndPublishPKSWireMockAPI
        workspace:
          clean: all
        displayName: "Build and Publish PKSWireMock API"
        steps:
          - task: PowerShell@2
            displayName: "Set assembly version numbers based on build ID"
            inputs:
              targetType: filePath
              filePath: '$(Build.SourcesDirectory)\Apply-AssemblyVersionAndDefaults.ps1'
              arguments: '-buildNumber "$(Build.BuildNumber)" -solutionDirectory "$(Build.SourcesDirectory)\UKHO.PKSWireMockService.API\" -UKHOAssemblyCompany "$env:UKHOAssemblyCompany" -UKHOAssemblyCopyright "$(UKHOAssemblyCopyright)" -UKHOAssemblyVersionPrefix "$env:UKHOAssemblyVersionPrefix" -UKHOAssemblyProduct "$(UKHOAssemblyProduct) Mock"'

          - task: UseDotNet@2
            displayName: 'Use .NET SDK'
            inputs:
              packageType: sdk
              useGlobalJson: true
              workingDirectory: '$(Build.SourcesDirectory)'

          - task: DotNetCoreCLI@2
            displayName: ".Net Core - NuGet restore"
            inputs:
              command: restore
              projects: |
                **/*.csproj
              feedsToUse: config
              noCache: true
              nugetConfigPath: '$(Build.SourcesDirectory)\BuildNuget.config'
              workingDirectory: '$(Build.SourcesDirectory)\UKHO.PKSWireMockService.API'

          - task: DotNetCoreCLI@2
            displayName: "dotnet build task"
            inputs:
              command: "build"
              projects: "**/*UKHO.PKSWireMock.API.csproj"
              arguments: '--configuration $(BuildConfiguration) --output $(Build.BinariesDirectory)'
              workingDirectory: '$(Build.SourcesDirectory)\UKHO.PKSWireMockService.API'

          - task: DotNetCoreCLI@2
            displayName: "Publish PKSWireMock WebAPI"
            inputs:
              command: "publish"
              publishWebProjects: false
              projects: '**/*UKHO.PKSWireMock.API.csproj'
              arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)\PKSWireMockWebAPI'
              zipAfterPublish: true
              modifyOutputPath: true

          - task: PublishBuildArtifacts@1
            displayName: "Publish PKSWireMock WebAPI Artifact"
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)\PKSWireMockWebAPI'
              ArtifactName: PKSWireMockWebAPI
     
  - stage: Devdeploy
    displayName: "Devdeploy (inc terraform, webapp deploy)"
    variables:
      - name: Environment
        value: "dev"
      - template: Deployment/templates/variables.yml
        parameters:
          Environment: ${{variables.Environment}}
    jobs:
      - template: Deployment/templates/Deploy.yml
        parameters:
          Environment: ${{variables.Environment}}
          ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
          AzureSubscription: "Exchange-Set-Service-Dev-A-008-02"
          Container: ${{variables.Container}}
          RunTests: true
      
  - stage: QAdeploy
    dependsOn: Devdeploy
    displayName: "QAdeploy (inc terraform, webapp deploy)"
    variables:
      - name: Environment
        value: "qa"
      - template: Deployment/templates/variables.yml
        parameters:
          Environment: ${{variables.Environment}}
    jobs:
      - template: Deployment/templates/Deploy.yml
        parameters:
          Environment: ${{variables.Environment}}
          ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
          AzureSubscription: "Exchange-Set-Service-QA-A-008-02"
          Container: ${{variables.Container}} 

  - stage: Livedeploy
    displayName: "Livedeploy (inc terraform, webapp deploy)"
    variables:
      - name: Environment
        value: "Live"
      - template: Deployment/templates/variables.yml
        parameters:
          Environment: ${{variables.Environment}}
    jobs:
      - template: Deployment/templates/Deploy.yml
        parameters:
          Environment: ${{variables.Environment}}
          ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
          AzureSubscription: "Exchange-Set-Service-Live-A-008-02"
          Container: ${{variables.Container}} 
   
      - job: PostDeploymentActions
        dependsOn:
        - DeployApp
        - Setup
        - CheckInfra
        - CheckFSS
        - CheckESS
        - CheckFM        
        pool: $(WindowPool)        
        displayName: Post Deployment Actions
        steps:
          - template: Deployment/templates/retain-pipeline.yml

  - stage: vNextIATDeploy
    dependsOn: 
      - Devdeploy
    displayName: vNext IAT Deploy (inc terraform, webapp deploy)
    condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/develop'), startsWith(variables['Build.SourceBranch'], 'refs/heads/dev/')))
    variables:
      - name: Environment
        value: "vnextiat"
      - template: Deployment/templates/variables.yml
        parameters:
          Environment: ${{variables.Environment}}
    jobs:
      - template: Deployment/templates/Deploy.yml
        parameters:
          Environment: ${{variables.Environment}}
          ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
          AzureSubscription: "Exchange-Set-Service-vNext-IAT-A.011.08"
          Container: ${{variables.Container}} 

  - stage: vnexte2eDeploy
    dependsOn: 
       - vNextIATDeploy
    displayName: vNext E2E Deploy (inc terraform, webapp deploy)
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
    variables:
      - name: Environment
        value: "vnexte2e"
      - template: Deployment/templates/variables.yml
        parameters:
          Environment: ${{variables.Environment}}
    jobs:
      - template: Deployment/templates/Deploy.yml
        parameters:
          Environment: ${{variables.Environment}}
          ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
          AzureSubscription: "Exchange-Set-Service-vNext-E2E-A.011.08"
          Container: ${{variables.Container}}

  - stage: iatDeploy
    dependsOn: 
       - PERFORM_DEPENDENCYCHECK_DOTNETBUILD_DOTNETTEST_AND_PUBLISH
    displayName: IAT Deploy (inc terraform, webapp deploy)
    condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/develop'), startsWith(variables['Build.SourceBranch'], 'refs/heads/dev/')))
    variables:
      - name: Environment
        value: "iat"
      - template: Deployment/templates/variables.yml
        parameters:
          Environment: ${{variables.Environment}}
    jobs:
      - template: Deployment/templates/Deploy.yml
        parameters:
          Environment: ${{variables.Environment}}
          ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
          AzureSubscription: "Exchange-Set-Service-IAT-A.011.08"
          Container: ${{variables.Container}}
          
  - stage: preprodDeploy
    dependsOn: 
      - PERFORM_DEPENDENCYCHECK_DOTNETBUILD_DOTNETTEST_AND_PUBLISH
    displayName: PreProd Deploy (inc terraform, webapp deploy)
    condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/develop'), startsWith(variables['Build.SourceBranch'], 'refs/heads/dev/')))
    variables:
      - name: Environment
        value: "preprod"
      - template: Deployment/templates/variables.yml
        parameters:
          Environment: ${{variables.Environment}}
    jobs:
      - template: Deployment/templates/Deploy.yml
        parameters:
          Environment: ${{variables.Environment}}
          ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
          AzureSubscription: "Exchange-Set-Service-Pre-A.011.08"
          Container: ${{variables.Container}} 