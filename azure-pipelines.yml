name: $(BuildDefinitionName)_$(SourceBranchName)_$(Date:yy)$(DayOfYear).$(BuildCounter)

parameters:
  - name: ContinueEvenIfResourcesAreGettingDestroyed
    displayName: "Continue even if resources are getting destroyed"
    type: boolean
    default: false

trigger:
  - main
  - release/*

pool: NautilusBuild

variables:
  - name: BuildConfiguration
    value: "release"
  - name: BuildPlatform
    value: "any cpu"
  - name: BuildCounter
    value: $[counter(format('{0:yyyyMMdd}', pipeline.startTime), 1)]
  - name: UKHOAssemblyCompany
    value: "UK Hydrographic Office"
  - name: UKHOAssemblyVersionPrefix
    value: "1.0."
  - name: UKHOAssemblyProduct
    value: "Periodic Output Service"
  - name: UKHOAssemblyCopyright
    value: "Copyright © UK Hydrographic Office"
  - name: DeploymentPool
    value: "UKHO Ubuntu 1804"
  - name: Container
    value: "ukhydrographicoffice/terraform-azure-powershell-unzip:1.1.9"
  - name: coverityPool
    value: NautilusBuild
  - group: Covscan-vars

resources:
  repositories:
  - repository: covscan
    type: github
    name: UKHO/coverityscan-buildtemplates
    endpoint: UKHO
    ref: refs/heads/master

stages:
  - stage: CoverityScan
    displayName: "Coverity Scan"
    pool:
      name: $(coverityPool)
    jobs:
    - job: Coverity
      workspace:
        clean: all
      steps:
        - checkout: self
          submodules: recursive
        - task: UseDotNet@2
          displayName: 'Use .NET 6 LTS SDK'
          inputs:
            packageType: sdk
            version: 6.0.x
            installationPath: $(Agent.ToolsDirectory)/dotnet
        - checkout: covscan
        - template: dotnet-cov.yml@covScan
          parameters:
            CovHostUrl: "$(CovHostUrl)"
            CovUser: "$(CovUser)"
            CovPwd: "$(CovPwd)"
            StreamName: "periodic-output-service"
            BuildCommand: "$(Build.Repository.LocalPath)/periodic-output-service/UKHO.PeriodicOutputService/UKHO.PeriodicOutputService.Fulfilment/UKHO.PeriodicOutputService.Fulfilment.csproj"
            StripPath: $(Build.Repository.LocalPath)/periodic-output-service
            CoverityScanPath: $(Build.Repository.LocalPath)/coverityscan-buildtemplates

  - stage: PERFORM_DEPENDENCYCHECK_DOTNETBUILD_DOTNETTEST_AND_PUBLISH
    displayName: "Build (inc DependencyChecker, Dotnet Build , dotnet test and publish artifact )"
    dependsOn: []
    jobs:
      - job: Dependencychecker
        workspace:
          clean: all
        displayName: "Dependencychecker"
        steps:
          - task: UseDotNet@2
            displayName: 'Use .NET Core 6.0.x sdk'
            inputs:
              packageType: sdk
              useGlobalJson: true
              workingDirectory: '$(Build.SourcesDirectory)\UKHO.PeriodicOutputService'

          - task: DotNetCoreCLI@2
            displayName: ".Net Core - NuGet restore non test projects only"
            inputs:
              command: "restore"
              projects: |
                **/*.csproj
                !**/*Tests.csproj
              feedsToUse: config
              noCache: true
              nugetConfigPath: '$(Build.SourcesDirectory)\BuildNuget.config'
              workingDirectory: '$(Build.SourcesDirectory)\UKHO.PeriodicOutputService'
              packagesDirectory: '$(Build.SourcesDirectory)\UKHO.PeriodicOutputService\packages'

          - task: CmdLine@1
            displayName: "Run OWASP Dependency Checker"
            inputs:
              filename: 'dependency-check.bat'
              arguments: '--project "periodic-output-service - $(Build.SourceBranchName)" --scan "$(Build.SourcesDirectory)\UKHO.PeriodicOutputService" --out "$(Build.ArtifactStagingDirectory)\DCReport" --suppression $(Build.SourcesDirectory)\NVDSuppressions.xml --noupdate'

          - task: PublishBuildArtifacts@1
            displayName: "Publish Artifact: OWASP Dependency Checker Report"
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)\DCReport'
              ArtifactName: "OWASP Dependency Checker Report"

          - task: PowerShell@1
            displayName: "Fail Build if Dependency Check Finds Any Vulnerabilities"
            inputs:
              scriptType: inlineScript
              arguments: '-ReportLocation $(Build.ArtifactStagingDirectory)\DCReport\*'
              inlineScript: |
                param($ReportLocation)
                Invoke-VulnerabilityCheck -ReportLocation $ReportLocation

      - job: UnitTestsAndCodeCoverage
        workspace:
          clean: all
        displayName: "Dotnet Test and Publish Code Coverage"
        steps:
          - task: UseDotNet@2
            displayName: 'Use .NET 6.0.x sdk'
            inputs:
              packageType: sdk
              useGlobalJson: true
              workingDirectory: '$(Build.SourcesDirectory)\UKHO.PeriodicOutputService'

          - task: DotNetCoreCLI@2
            displayName: ".Net Core - NuGet restore test projects only"
            inputs:
              command: "restore"
              projects: "**/*Tests.csproj"
              feedsToUse: config
              noCache: true
              nugetConfigPath: '$(Build.SourcesDirectory)\BuildNuget.config'
              workingDirectory: '$(Build.SourcesDirectory)\UKHO.PeriodicOutputService'
              packagesDirectory: '$(Build.SourcesDirectory)\UKHO.PeriodicOutputService\packagesForTests'

          - task: DotNetCoreCLI@2
            displayName: "dotnet test - Perform Unit Tests"
            inputs:
              command: "test"
              projects: "**/*UnitTests.csproj"
              arguments: '--configuration $(BuildConfiguration) --settings "$(Build.SourcesDirectory)\test.runsettings" /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura'
              publishTestResults: true
              testRunTitle: "UnitTests"

          - task: PowerShell@2
            displayName: "Generate code coverage report"
            inputs:
              targetType: filePath
              filePath: '$(Build.SourcesDirectory)\CodeCoverageReport.ps1'
              arguments: '-source "$(Build.SourcesDirectory)" -reportFolder "$(Build.ArtifactStagingDirectory)"'

          - task: PublishBuildArtifacts@1
            displayName: "Publish Code coverage"
            inputs:
              PathtoPublish: "$(Build.ArtifactStagingDirectory)/codecoveragereport"
              ArtifactName: codecoveragereport

      - job: BuildAndPublishWebJob
        workspace:
          clean: all
        displayName: "Dotnet Build publish WebJob"
        steps:
          - task: PowerShell@2
            displayName: "Set assembly version numbers based on build ID"
            inputs:
              targetType: filePath
              filePath: '$(Build.SourcesDirectory)\Apply-AssemblyVersionAndDefaults.ps1'
              arguments: '-buildNumber "$(Build.BuildNumber)" -solutionDirectory "$(Build.SourcesDirectory)\UKHO.PeriodicOutputService\" -UKHOAssemblyCompany "$env:UKHOAssemblyCompany" -UKHOAssemblyCopyright "$(UKHOAssemblyCopyright)" -UKHOAssemblyVersionPrefix "$env:UKHOAssemblyVersionPrefix" -UKHOAssemblyProduct "$env:UKHOAssemblyProduct"'

          - task: UseDotNet@2
            displayName: 'Use .NET Core 6.0.x sdk'
            inputs:
              packageType: sdk
              useGlobalJson: true
              workingDirectory: '$(Build.SourcesDirectory)\UKHO.PeriodicOutputService'

          - task: DotNetCoreCLI@2
            displayName: ".Net Core - NuGet restore"
            inputs:
              command: restore
              projects: |
                **/*.csproj
              feedsToUse: config
              noCache: true
              nugetConfigPath: '$(Build.SourcesDirectory)\BuildNuget.config'
              workingDirectory: '$(Build.SourcesDirectory)\UKHO.PeriodicOutputService'

          - task: DotNetCoreCLI@2
            displayName: "dotnet build task"
            inputs:
              command: "build"
              projects: "**/*.csproj"
              arguments: '--configuration $(BuildConfiguration) --output $(Build.BinariesDirectory)'

          - task: DotNetCoreCLI@2
            displayName: "Publish POS Fulfilment Service Code"
            inputs:
              command: "publish"
              publishWebProjects: false
              projects: "**/*UKHO.PeriodicOutputService.Fulfilment.csproj"
              arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)\PeriodicOutputFulfilmentService\App_Data\jobs\triggered\POSFulfilmentWebJob'
              zipAfterPublish: false
              modifyOutputPath: false

          - task: ArchiveFiles@2
            displayName: "Zip POS fulfilment service"
            inputs:
              rootFolderOrFile: '$(Build.ArtifactStagingDirectory)\PeriodicOutputFulfilmentService\'
              includeRootFolder: false
              archiveType: "zip"
              archiveFile: '$(Build.ArtifactStagingDirectory)\PeriodicOutputFulfilmentService\PeriodicOutputFulfilmentService.zip'
              replaceExistingArchive: true

          - task: PublishBuildArtifacts@1
            displayName: "Publish PeriodicOutputFulfilmentService Artifact"
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)\PeriodicOutputFulfilmentService'
              ArtifactName: PeriodicOutputService

      - job: PublishTerraformArtifacts
        workspace:
          clean: all
        displayName: "Publish Terraform Artifacts"
        steps:

          - task: PublishBuildArtifacts@1
            displayName: "Publish Dev terraform Artifacts"
            inputs:
              PathtoPublish: '$(Build.SourcesDirectory)\DevDeployment'
              ArtifactName: devterraformartifact              

          - task: PublishBuildArtifacts@1
            displayName: "Publish QA and Live terraform Artifacts"
            inputs:
              PathtoPublish: '$(Build.SourcesDirectory)\QALiveDeployment'
              ArtifactName: qaliveterraformartifact

      - job: PublishFunctionalTests
        workspace:
          clean: all
        displayName: "Publish Functional Tests"
        steps:
          - task: UseDotNet@2
            displayName: 'Use .NET Core 6.0.x sdk'
            inputs:
              packageType: sdk
              useGlobalJson: true
              workingDirectory: '$(Build.SourcesDirectory)\UKHO.PeriodicOutputService'

          - task: DotNetCoreCLI@2
            displayName: ".Net Core - NuGet restore"
            inputs:
              command: restore
              projects: |
                **/*.csproj
              feedsToUse: config
              noCache: true
              nugetConfigPath: '$(Build.SourcesDirectory)\BuildNuget.config'
              workingDirectory: '$(Build.SourcesDirectory)\UKHO.PeriodicOutputService'

          - task: DotNetCoreCLI@2
            displayName: "Publish functional test"
            inputs:
              command: "publish"
              publishWebProjects: false
              projects: "**/*UKHO.PeriodicOutputService.API.FunctionalTests.csproj"
              arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)\UKHO.PeriodicOutputService.API.FunctionalTests'
              zipAfterPublish: false

          - task: PublishBuildArtifacts@1
            displayName: "Publish Functional test Artifact"
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)\UKHO.PeriodicOutputService.API.FunctionalTests'
              ArtifactName: functionaltests
        
      - job: BuildAndPublishMockAPI
        workspace:
          clean: all
        displayName: "Build and Publish Mock API"
        steps:
          - task: PowerShell@2
            displayName: "Set assembly version numbers based on build ID"
            inputs:
              targetType: filePath
              filePath: '$(Build.SourcesDirectory)\Apply-AssemblyVersionAndDefaults.ps1'
              arguments: '-buildNumber "$(Build.BuildNumber)" -solutionDirectory "$(Build.SourcesDirectory)\UKHO.FmEssFssMock.API\" -UKHOAssemblyCompany "$env:UKHOAssemblyCompany" -UKHOAssemblyCopyright "$(UKHOAssemblyCopyright)" -UKHOAssemblyVersionPrefix "$env:UKHOAssemblyVersionPrefix" -UKHOAssemblyProduct "$(UKHOAssemblyProduct) Mock"'

          - task: UseDotNet@2
            displayName: 'Use .NET Core 6.0.x sdk'
            inputs:
              packageType: sdk
              useGlobalJson: true
              workingDirectory: '$(Build.SourcesDirectory)\UKHO.FmEssFssMock.API'

          - task: DotNetCoreCLI@2
            displayName: ".Net Core - NuGet restore"
            inputs:
              command: restore
              projects: |
                **/*.csproj
              feedsToUse: config
              noCache: true
              nugetConfigPath: '$(Build.SourcesDirectory)\BuildNuget.config'
              workingDirectory: '$(Build.SourcesDirectory)\UKHO.FmEssFssMock.API'

          - task: DotNetCoreCLI@2
            displayName: "dotnet build task"
            inputs:
              command: "build"
              projects: "**/*UKHO.FmEssFssMock.API.csproj"
              arguments: '--configuration $(BuildConfiguration) --output $(Build.BinariesDirectory)'
              workingDirectory: '$(Build.SourcesDirectory)\UKHO.FmEssFssMock.API'

          - task: DotNetCoreCLI@2
            displayName: "Publish MockWebAPI"
            inputs:
              command: "publish"
              publishWebProjects: false
              projects: '**/*UKHO.FmEssFssMock.API.csproj'
              arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)\MockWebAPI'
              zipAfterPublish: true
              modifyOutputPath: true

          - task: PublishBuildArtifacts@1
            displayName: "Publish WebAPI Artifact"
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)\MockWebAPI'
              ArtifactName: MockWebAPI 
     
  - stage: Devdeploy
    displayName: "Devdeploy (inc terraform, webapp deploy)"
    variables:
      - group: "ESS-Dev-Variables"
      - group: "ESS-Deployment-Variables-DEV"
      - group: "POS-Dev-Variables"
      - name: "ESSApiConfiguration.TenantId"
        value: $(TenantId)
      - name: "ESSApiConfiguration.AutoTestClientId"
        value: $(AutoTestClientId_Authed)
      - name: "ESSApiConfiguration.AutoTestClientSecret"
        value: $(AutoTestClientSecret_Authed)
      - name: "ESSApiConfiguration.EssClientId"
        value: $(ESSClientId)

    jobs:
      - deployment: DevDeployApp
        displayName: "Dev - Deploy Terraform and Dotnet App"
        environment: "Ess-Dev"
        pool: $(DeploymentPool)
        container: ${{variables.Container}}
        workspace:
          clean: all
        variables:
          - name: AzureStorageConfiguration.ConnectionString
            value: $[ dependencies.DevDeployApp.outputs['DevDeployApp.TerraformDeploy.storage_connection_string']  ]
        strategy:
          runOnce:
            deploy:
              steps:
                - template: DevDeployment/templates/continuous-deployment.yml
                  parameters:
                    ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
                    AzureSubscription: "Exchange-Set-Service-Dev-A-008-02"

      - job: CheckInfra
        displayName: "Check Infrastructure Health"
        dependsOn: DevDeployApp
        variables:
          - name: WEB_APP_NAME
            value: $[ dependencies.DevDeployApp.outputs['DevDeployApp.TerraformDeploy.WEBAPP']  ]
          - name: RGName
            value: $[ dependencies.DevDeployApp.outputs['DevDeployApp.TerraformDeploy.ResourceGroup']  ]
        steps:
          - task: AzureCLI@2
            displayName: "Check Infrastructure is healthy"
            inputs:
              azureSubscription: "Exchange-Set-Service-Dev-A-008-02"
              scriptType: 'pscore'
              scriptLocation: 'scriptPath'
              scriptPath: '$(Build.SourcesDirectory)/DevDeployment/check_service_status_webjob.ps1'
              arguments: '-RGName $(RGName) -webAppName $(WEB_APP_NAME) -waitTimeInMinute $(waitTimeInMinute)'

      - job: CheckFSS
        displayName: "Check FSS Health"
        dependsOn: DevDeployApp
        steps:
          - task: PowerShell@2
            displayName: "Check FSS Health endpoint is healthy"
            inputs:
              targetType: filePath
              filePath: "$(Build.SourcesDirectory)/DevDeployment/check_health_endpoint.ps1"
              arguments: "-healthEndPointUrl $(FSSHealthEndpoint)/heartbeat -waitTimeInMinute $(waitTimeInMinute)"

      - job: CheckESS
        displayName: "Check ESS Health"
        dependsOn: DevDeployApp
        steps:
          - task: PowerShell@2
            displayName: "Check ESS Health endpoint is healthy"
            inputs:
              targetType: filePath
              filePath: '$(Build.SourcesDirectory)/DevDeployment/check_health_endpoint.ps1'
              arguments: "-healthEndPointUrl $(ESSHealthEndpoint)/health -waitTimeInMinute $(waitTimeInMinute)"

      - job: CheckFM
        displayName: "Check Fleet Manager Health"
        dependsOn: DevDeployApp
        steps:
          - task: PowerShell@2
            displayName: "Check FM Health endpoint is healthy"
            inputs:
              targetType: filePath
              filePath: '$(Build.SourcesDirectory)/DevDeployment/check_health_endpoint.ps1'
              arguments: "-healthEndPointUrl $(FMHealthEndpoint)/health-check -waitTimeInMinute $(waitTimeInMinute)"

      - job: FunctionalTests
        dependsOn:
        - DevDeployApp
        - CheckInfra
        - CheckFSS
        - CheckESS
        - CheckFM
        pool: NautilusBuild
        displayName: "Dev Functional Automated Tests"
        workspace:
         clean: all
        variables:
          - name: WEB_APP_NAME
            value: $[ dependencies.DevDeployApp.outputs['DevDeployApp.TerraformDeploy.WEBAPP']  ]
          - name: mockWebAppName
            value: $[ dependencies.DevDeployApp.outputs['DevDeployApp.TerraformDeploy.mockWebApp']  ]
          - name: mockWebAppResourceGroup
            value: $[ dependencies.DevDeployApp.outputs['DevDeployApp.TerraformDeploy.mockWebAppResourceGroupName']  ]
          - name: RGName
            value: $[ dependencies.DevDeployApp.outputs['DevDeployApp.TerraformDeploy.ResourceGroup']  ]
          - name: POSWebjobApiConfiguration.UserName
            value: $[ dependencies.DevDeployApp.outputs['DevDeployApp.TerraformDeploy.webJobUsername']  ]
          - name: POSWebjobApiConfiguration.Password
            value: $[ dependencies.DevDeployApp.outputs['DevDeployApp.TerraformDeploy.webJobPassword']  ]
        steps:
                - task: DownloadBuildArtifacts@0
                  displayName: "Download Functional test Artifact"
                  inputs:
                    buildType: 'current'
                    downloadType: 'single'
                    artifactName: 'functionaltests'
                    downloadPath: '$(Build.SourcesDirectory)'

                - task: FileTransform@2
                  displayName: "File Transform: functionaltests"
                  inputs:
                    folderPath: '$(Build.SourcesDirectory)/functionaltests/'
                    xmlTransformationRules:
                    jsonTargetFiles: '**/appsettings.json'

                - task: UseDotNet@2
                  displayName: 'Use .NET Core sdk'
                  inputs:
                    packageType: sdk
                    version: 6.0.x

                - task: DotNetCoreCLI@2
                  displayName: "Run Functional tests"
                  inputs:
                    command: "test"
                    projects: |
                      **/*FunctionalTest*.dll
                      !**/*TestAdapter.dll
                      !**/obj/**
                    testRunTitle: "Dev-AutomationTests"
                    workingDirectory: '$(Build.SourcesDirectory)/functionaltests'

                - task: DownloadBuildArtifacts@0
                  displayName: "Download Terraform Artifact"
                  condition: always()
                  inputs:
                    buildType: 'current'
                    downloadType: 'single'
                    artifactName: 'devterraformartifact'
                    downloadPath: '$(Build.SourcesDirectory)'

                - task: AzureCLI@2
                  displayName: "Swap Stub and Webjob Configuration"
                  condition: always()
                  inputs:
                    azureSubscription: "Exchange-Set-Service-Dev-A-008-02"
                    scriptType: 'pscore'
                    scriptLocation: 'scriptPath'
                    scriptPath: "$(Build.SourcesDirectory)/devterraformartifact/set_stub_webjob_configuration.ps1"
                    arguments: '-essapibaseurl $(ESSApiConfiguration.BaseUrl_PostFT) -fssapibaseurl $(FSSApiConfiguration.BaseUrl_PostFT) -fleetmanagerbaseurl $(FleetManagerB2BApiConfiguration.BaseUrl_PostFT) -fleetmanagerfilepath $(FleetManagerB2BApiConfiguration.GetCatalogueResponseFilePath_PostFT) -resourcegroup $(RGName) -webappname $(WEB_APP_NAME) -mockresourcegroup $(mockWebAppResourceGroup) -mockwebappname $(mockWebAppName)'

  - stage: QAdeploy
    dependsOn: Devdeploy
    displayName: "QAdeploy (inc terraform, webapp deploy)"
    variables:
      - group: "ESS-QA-Variables"
      - group: "ESS-Deployment-Variables-QA"
      - group: "POS-QA-Variables"
      - name: "ESSApiConfiguration.TenantId"
        value: $(TenantId)
      - name: "ESSApiConfiguration.AutoTestClientId"
        value: $(AutoTestClientId_Authed)
      - name: "ESSApiConfiguration.AutoTestClientSecret"
        value: $(AutoTestClientSecret_Authed)
      - name: "ESSApiConfiguration.EssClientId"
        value: $(ESSClientId)
    condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'),startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')))

    jobs:
      - deployment: QADeployApp
        displayName: "QA - Deploy Terraform and Dotnet App"
        environment: "Ess-Qa"
        pool: $(DeploymentPool)
        container: ${{variables.Container}}
        workspace:
          clean: all
        strategy:
          runOnce:
            deploy:
              steps:
                - template: QALiveDeployment/templates/continuous-deployment.yml
                  parameters:
                    ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
                    AzureSubscription: "Exchange-Set-Service-QA-A-008-02"

      - job: CheckInfra
        displayName: "Check Infrastructure Health"
        dependsOn: QADeployApp
        variables:
          - name: WEB_APP_NAME
            value: $[ dependencies.QADeployApp.outputs['QADeployApp.TerraformDeploy.WEBAPP']  ]
          - name: RGName
            value: $[ dependencies.QADeployApp.outputs['QADeployApp.TerraformDeploy.ResourceGroup']  ]
        steps:
          - task: AzureCLI@2
            displayName: "Check Infrastructure is healthy"
            inputs:
              azureSubscription: "Exchange-Set-Service-QA-A-008-02"
              scriptType: 'pscore'
              scriptLocation: 'scriptPath'
              scriptPath: '$(Build.SourcesDirectory)/QALiveDeployment/check_service_status_webjob.ps1'
              arguments: '-RGName $(RGName) -webAppName $(WEB_APP_NAME) -waitTimeInMinute $(waitTimeInMinute)'

      - job: CheckFSS
        displayName: "Check FSS Health"
        dependsOn: QADeployApp
        steps:
          - task: PowerShell@2
            displayName: "Check FSS Health endpoint is healthy"
            inputs:
              targetType: filePath
              filePath: "$(Build.SourcesDirectory)/QALiveDeployment/check_health_endpoint.ps1"
              arguments: "-healthEndPointUrl $(FSSHealthEndpoint)/heartbeat -waitTimeInMinute $(waitTimeInMinute)"

      - job: CheckESS
        displayName: "Check ESS Health"
        dependsOn: QADeployApp
        steps:
          - task: PowerShell@2
            displayName: "Check ESS Health endpoint is healthy"
            inputs:
              targetType: filePath
              filePath: '$(Build.SourcesDirectory)/QALiveDeployment/check_health_endpoint.ps1'
              arguments: "-healthEndPointUrl $(ESSHealthEndpoint)/health -waitTimeInMinute $(waitTimeInMinute)"

      - job: CheckFM
        displayName: "Check Fleet Manager Health"
        dependsOn: QADeployApp
        steps:
          - task: PowerShell@2
            displayName: "Check FM Health endpoint is healthy"
            inputs:
              targetType: filePath
              filePath: '$(Build.SourcesDirectory)/QALiveDeployment/check_health_endpoint.ps1'
              arguments: "-healthEndPointUrl $(FMHealthEndpoint)/health-check -waitTimeInMinute $(waitTimeInMinute)"

      - job: FunctionalTests
        dependsOn:
        - QADeployApp
        - CheckInfra
        - CheckFSS
        - CheckESS
        - CheckFM
        pool: NautilusBuild
        displayName: "QA Functional Automated Tests"
        workspace:
         clean: all
        variables:
          - name: WEB_APP_NAME
            value: $[ dependencies.QADeployApp.outputs['QADeployApp.TerraformDeploy.WEBAPP']  ]
          - name: mockWebAppName
            value: $[ stageDependencies.Devdeploy.DevDeployApp.outputs['DevDeployApp.TerraformDeploy.mockWebApp']  ]
          - name: mockWebAppResourceGroup
            value: $[ stageDependencies.Devdeploy.DevDeployApp.outputs['DevDeployApp.TerraformDeploy.mockWebAppResourceGroupName']  ]
          - name: RGName
            value: $[ dependencies.QADeployApp.outputs['QADeployApp.TerraformDeploy.ResourceGroup']  ]
          - name: POSWebjobApiConfiguration.UserName
            value: $[ dependencies.QADeployApp.outputs['QADeployApp.TerraformDeploy.webJobUsername']  ]
          - name: POSWebjobApiConfiguration.Password
            value: $[ dependencies.QADeployApp.outputs['QADeployApp.TerraformDeploy.webJobPassword']  ]
        steps:

                - task: AzureCLI@2
                  displayName: "Swap Stub Configuration"
                  condition: always()
                  inputs:
                    azureSubscription: "Exchange-Set-Service-Dev-A-008-02"
                    scriptType: 'pscore'
                    scriptLocation: 'scriptPath'
                    scriptPath: "$(Build.SourcesDirectory)/QALiveDeployment/set_stub_configuration.ps1"
                    arguments: '-fleetmanagerfilepath $(FleetManagerB2BApiConfiguration.GetCatalogueResponseFilePath) -mockresourcegroup $(mockWebAppResourceGroup) -mockwebappname $(mockWebAppName)'

                - task: DownloadBuildArtifacts@0
                  displayName: "Download Functional test Artifact"
                  inputs:
                    buildType: 'current'
                    downloadType: 'single'
                    artifactName: 'functionaltests'
                    downloadPath: '$(Build.SourcesDirectory)'

                - task: FileTransform@2
                  displayName: "File Transform: functionaltests"
                  inputs:
                    folderPath: '$(Build.SourcesDirectory)/functionaltests/'
                    xmlTransformationRules:
                    jsonTargetFiles: '**/appsettings.json'

                - task: UseDotNet@2
                  displayName: 'Use .NET Core sdk'
                  inputs:
                    packageType: sdk
                    version: 6.0.x

                - task: DotNetCoreCLI@2
                  displayName: "Run Functional tests"
                  inputs:
                    command: "test"
                    projects: |
                      **/*FunctionalTest*.dll
                      !**/*TestAdapter.dll
                      !**/obj/**
                    testRunTitle: "QA-AutomationTests"
                    workingDirectory: '$(Build.SourcesDirectory)/functionaltests'

                - task: DownloadBuildArtifacts@0
                  displayName: "Download Terraform Artifact"
                  condition: always()
                  inputs:
                    buildType: 'current'
                    downloadType: 'single'
                    artifactName: 'qaliveterraformartifact'
                    downloadPath: '$(Build.SourcesDirectory)'

                - task: AzureCLI@2
                  displayName: "Swap Webjob Configuration"
                  condition: always()
                  inputs:
                    azureSubscription: "Exchange-Set-Service-QA-A-008-02"
                    scriptType: 'pscore'
                    scriptLocation: 'scriptPath'
                    scriptPath: "$(Build.SourcesDirectory)/qaliveterraformartifact/set_webjob_configuration.ps1"
                    arguments: '-essapibaseurl $(ESSApiConfiguration.BaseUrl_PostFT) -fssapibaseurl $(FSSApiConfiguration.BaseUrl_PostFT) -fleetmanagerbaseurl $(FleetManagerB2BApiConfiguration.BaseUrl_PostFT) -resourcegroup $(RGName) -webappname $(WEB_APP_NAME)'

                - task: AzureCLI@2
                  displayName: "Swap Stub Configuration"
                  condition: always()
                  inputs:
                    azureSubscription: "Exchange-Set-Service-Dev-A-008-02"
                    scriptType: 'pscore'
                    scriptLocation: 'scriptPath'
                    scriptPath: "$(Build.SourcesDirectory)/qaliveterraformartifact/set_stub_configuration.ps1"
                    arguments: '-fleetmanagerfilepath $(FleetManagerB2BApiConfiguration.GetCatalogueResponseFilePath_PostFT) -mockresourcegroup $(mockWebAppResourceGroup) -mockwebappname $(mockWebAppName)'

  - stage: Livedeploy
    displayName: "Livedeploy (inc terraform, webapp deploy)"
    variables:
      - group: "ESS-Live-Variables"
      - group: "ESS-Deployment-Variables-LIVE"
      - group: "POS-Live-Variables"
    condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'),startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')))

    jobs:
      - deployment: LiveDeployApp
        displayName: "Live - Deploy Terraform and Dotnet App"
        environment: "Ess-Live"
        pool: $(DeploymentPool)
        container: ${{variables.Container}}
        workspace:
          clean: all
        strategy:
          runOnce:
            deploy:
              steps:
                - template: QALiveDeployment/templates/continuous-deployment.yml
                  parameters:
                    ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
                    AzureSubscription: "Exchange-Set-Service-Live-A-008-02"

      - job: CheckInfra
        displayName: "Check Infrastructure Health"
        dependsOn: LiveDeployApp
        variables:
          - name: WEB_APP_NAME
            value: $[ dependencies.LiveDeployApp.outputs['LiveDeployApp.TerraformDeploy.WEBAPP']  ]
          - name: RGName
            value: $[ dependencies.LiveDeployApp.outputs['LiveDeployApp.TerraformDeploy.ResourceGroup']  ]
        steps:
          - task: AzureCLI@2
            displayName: "Check Infrastructure is healthy"
            inputs:
              azureSubscription: "Exchange-Set-Service-Live-A-008-02"
              scriptType: 'pscore'
              scriptLocation: 'scriptPath'
              scriptPath: '$(Build.SourcesDirectory)/QALiveDeployment/check_service_status_webjob.ps1'
              arguments: '-RGName $(RGName) -webAppName $(WEB_APP_NAME) -waitTimeInMinute $(waitTimeInMinute)'

      - job: CheckFSS
        displayName: "Check FSS Health"
        dependsOn: LiveDeployApp
        steps:
          - task: PowerShell@2
            displayName: "Check FSS Health endpoint is healthy"
            inputs:
              targetType: filePath
              filePath: "$(Build.SourcesDirectory)/QALiveDeployment/check_health_endpoint.ps1"
              arguments: "-healthEndPointUrl $(FSSHealthEndpoint)/heartbeat -waitTimeInMinute $(waitTimeInMinute)"

      - job: CheckESS
        displayName: "Check ESS Health"
        dependsOn: LiveDeployApp
        steps:
          - task: PowerShell@2
            displayName: "Check ESS Health endpoint is healthy"
            inputs:
              targetType: filePath
              filePath: '$(Build.SourcesDirectory)/QALiveDeployment/check_health_endpoint.ps1'
              arguments: "-healthEndPointUrl $(ESSHealthEndpoint)/health -waitTimeInMinute $(waitTimeInMinute)"

      - job: CheckFM
        displayName: "Check Fleet Manager Health"
        dependsOn: LiveDeployApp
        steps:
          - task: PowerShell@2
            displayName: "Check FM Health endpoint is healthy"
            inputs:
              targetType: filePath
              filePath: '$(Build.SourcesDirectory)/QALiveDeployment/check_health_endpoint_fm_live.ps1'
              arguments: "-healthEndPointUrl $(FMHealthEndpoint)/live/echo/health-check -waitTimeInMinute $(waitTimeInMinute) -ocpapimsubscriptionkey $(FM_Ocp_Apim_Subscription_Key)"
