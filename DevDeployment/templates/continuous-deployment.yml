parameters:
  - name: ContinueEvenIfResourcesAreGettingDestroyed
    type: boolean
    default: false
  - name: AzureSubscription
    type: string

steps:

  - task: PowerShell@2
    displayName: "Terraform $(Environment)deploy"
    name: TerraformDeploy
    inputs:
      targetType: filePath
      filePath: '$(Pipeline.Workspace)/devterraformartifact/terraform_conditional_run.ps1'
      arguments: '-deploymentResourceGroupName $(DeploymentResourceGroupName) -deploymentStorageAccountName $(DeploymentStorageAccountName) -workSpace $(Environment) -continueEvenIfResourcesAreGettingDestroyed $${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }} -terraformJsonOutputFile $(Pipeline.Workspace)/devterraformartifact/terraform_output.json'
    env:
      ARM_CLIENT_ID: $(TERRAFORM-CLIENT-ID)
      ARM_CLIENT_SECRET: $(TERRAFORM-CLIENT-SECRET)
      ARM_TENANT_ID: $(TERRAFORM-TENANT-ID)
      ARM_SUBSCRIPTION_ID: $(TERRAFORM-SUBSCRIPTION-ID)
      TF_VAR_agent_rg: $(agentRG)
      TF_VAR_agent_vnet_name: $(agentVnetName)
      TF_VAR_agent_subnet_name: $(agentSubnetName)
      TF_VAR_agent_subscription_id: $(agentSubscriptionId)

  - task: FileTransform@1
    displayName: "File Transform: Mock API WebApp"
    inputs:
      folderPath: '$(Pipeline.Workspace)/MockWebAPI/*.zip'
      fileType: 'json'
      targetFiles: '**/appsettings.json'

  - task: PowerShell@2
    inputs:
      targetType: 'inline'
      script: |
        Write-Host $(TerraformDeploy.mockWebAppName)
        Write-Host $(TerraformDeploy.mockWebAppResourceGroup)

  - task: AzureCLI@2
    displayName: "Mock API WebApp deployment"
    inputs:
      azureSubscription: "${{ parameters.AzureSubscription }}"
      scriptType: 'pscore'
      scriptLocation: 'scriptPath'
      scriptPath: '$(Pipeline.Workspace)/devterraformartifact/mock_api_deployment.ps1'
      arguments: '-mockWebAppName $(TerraformDeploy.mockWebAppName) -mockApipackagePath "$(Pipeline.Workspace)/MockWebAPI/UKHO.FleetManagerMock.API.zip" -mockWebAppResourceGroup $(TerraformDeploy.mockWebAppResourceGroup)'

  - task: FileTransform@1
    displayName: "File Transform: POS Config"
    inputs:
      folderPath: '$(Pipeline.Workspace)/PeriodicOutputService/*.zip'
      fileType: 'json'
      targetFiles: '**/appsettings.json'

  - task: AzureWebApp@1
    displayName: "Azure LXS App Deploy: pos-$(Environment)-lxs-webapp"
    inputs:
      azureSubscription: "${{ parameters.AzureSubscription }}"
      appType: webApp
      appName: "$(TerraformDeploy.WEB_APP_NAME)"
      package: "$(Pipeline.Workspace)/PeriodicOutputService/PeriodicOutputFulfilmentService.zip"
